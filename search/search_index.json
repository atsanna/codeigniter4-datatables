{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Datatables","text":"<p>This is an extesion for CodeIgniter 4 for add the Datatables support of your application.</p> <p>Among the many features and tools it provides are:</p>"},{"location":"#-","title":"-","text":""},{"location":"#license","title":"License","text":"<p>Shield is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"getting_started/install/","title":"Installation","text":"<p>This is a Datatables support for CodeIgniter 4. It is designed so that you can download it and incorporate into your new or existing CodeIgniter 4 application, modifying everything as you would need to. It uses Composer to install and manage dependencies. These directions assume that you have Composer installed globally. If you do not, then you will need to adjust the commands according to your setup.</p> <p>NOTE: CODEIGNITER VERSIONS PRIOR TO 4.2 MUST EXTEND THE VALIDATION CLASS FROM BASECONFIG.</p>"},{"location":"getting_started/install/#install-codeigniter","title":"Install CodeIgniter","text":"<p>You must have an existing CodeIgniter 4 project already setup. To install a new project, type the folloing at the command line:</p> <pre><code>    &gt; composer create-project codeigniter4/appstarter my-app --stability dev</code></pre> <p>This creates a new CodeIgniter 4 project in the <code>my-app</code> directory. Finish any required setup as per the CodeIgniter User Guide.</p>"},{"location":"getting_started/install/#download-initial-repo","title":"Download Initial Repo","text":"<p>Next you need to install Datatables support as a dependency in your project. From your command line type the following:</p> <pre><code>    &gt;  composer require atsanna/codeigniter4-datatables --stability dev</code></pre> <p>This will download the latest version and all dependencies.</p>"},{"location":"getting_started/install/#enjoy","title":"Enjoy","text":"<p>That's all that's needed to get started.</p>"},{"location":"html/table/","title":"CodeIgniter 4 - DataTables","text":"<p>A library to easily use DataTables with CodeIgniter 4.</p>"},{"location":"html/table/#the-table-class","title":"The Table class","text":"<p>This class allows to obtain a table formatted in html.</p> <pre><code>    $table  = new \\atsanna\\DataTables\\Html\\Table();</code></pre>"},{"location":"html/table/#association-of-a-model-to-the-table","title":"Association of a Model to the table","text":"<p>It is possible to define a model to be passed as a dependency in the constructor; this model will be used for the management of columns and queries.</p> <pre><code>    $userModel  = new \\atsanna\\Models\\UserModel();\n    $table      = new \\atsanna\\DataTables\\Html\\Table( $userModel );</code></pre> <p>The model can be associated or replaced using the method <code>setModel()</code></p> <pre><code>    $table      = new \\atsanna\\DataTables\\Html\\Table();\n    $userModel  = new \\atsanna\\Models\\UserModel();\n    $table-&gt;setModel($userModel);</code></pre> <p>To retrieve and use the associated model, use the method <code>getModel()</code></p> <pre><code>    $model = $table-&gt;getModel();</code></pre>"},{"location":"html/table/#datatables-configuration","title":"DataTables configuration","text":"<p>Once the class is instantiated, a basic configuration for the javascript part of DataTables will also be created. This configuration can be called with the method <code>getConfiguration()</code> and customized with specific settings according to need.</p> <pre><code>    $table-&gt;getConfiguration()\n            -&gt;setPaging(true)\n            -&gt;setPagingType( 'full_numbers')\n            -&gt;setOrdering(true)\n            -&gt;setInfo(false)\n            -&gt;setSearching(true)\n            -&gt;setLengthMenu('[[10, 25, 50, 100, -1], [10, 25, 50, 100, \"All\"]]')\n            -&gt;setAutoWidth(false)\n            -&gt;setScrollX(true);</code></pre>"},{"location":"html/table/#return-of-the-table-in-html-format","title":"Return of the table in html format","text":"<p>The <code>render()</code> method returns the formatted table. It is possible to pass an array with the definition of the fields, styles and css classes to improve the visualization</p> <pre><code>    $data = [\n        'id'        =&gt; $userModel-&gt;table,\n        'class'     =&gt; 'table table-striped table-bordered',\n        'style'     =&gt; 'width: 100%; margin-left: auto; margin-right: auto;',\n        'fields'    =&gt; $userModel-&gt;allowedFields,\n    ];\n    echo $table-&gt;render($data);</code></pre>"},{"location":"javascript/javascript/","title":"DataTables Javascript","text":"<p>We instantiate the class</p>"},{"location":"javascript/javascript/#the-javascript-class","title":"The Javascript class","text":"<p>This class allows you to obtain a complete script to execute datatables.</p> <pre><code>        $javascript = new \\atsanna\\DataTables\\Javascript\\DataTablesScript();</code></pre> <p>At this point we can import the javascript and css libraries</p> <pre><code>        echo $javascript-&gt;getExternalLibraries();</code></pre> <p>At the end of the page, let's add the automatically generated script</p> <pre><code>        echo $javascript-&gt;getDocumentReady( $data['id'], $table-&gt;getConfiguration() );</code></pre>"}]}